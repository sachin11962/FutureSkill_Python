Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 23:09:28) [MSC v.1916 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>>  num = 2.5
SyntaxError: unexpected indent
>>> num = 2.5
\
>>> type(num)
<class 'float'>
>>> num = 5
>>> type(num)
<class 'int'>
>>> num = 6+9j
>>> type(num)
<class 'complex'>
>>> a = 5.6
>>> b = int(a)
>>> type(a)
<class 'float'>
>>> type(b)
<class 'int'>
>>> b
5
>>> k = float(b)
>>> type(k)
<class 'float'>
>>> k
5.0
>>> k = 6
>>> c = complex(b,k)
>>> c
(5+6j)
>>> b < k
True
>>> #true is boolean type
>>> bool = b < k
>>> type(bool)
<class 'bool'>
>>> bool
True
>>> b > k
False
>>> int(True)
1
>>> int(False)
0
>>> lst = [25,36,45,12]
>>> type(lst)
<class 'list'>
>>> a = [25,36,45,15,12,25]
>>> a
[25, 36, 45, 15, 12, 25]
>>> type(a)
<class 'list'>
>>> a = {25,36,45,15,12,25}
>>> a
{36, 12, 45, 15, 25}
>>> type(a)
<class 'set'>
>>> t = (25,36,45,15,12)
>>> type(t)
<class 'tuple'>
>>> str = "sachin"
>>> type(str)
<class 'str'>
>>> st = 'a'
>>> type(st)
<class 'str'>
>>> range(10)
range(0, 10)
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> list(range(2,10,2))
[2, 4, 6, 8]
>>> list(range(2,11,2))
[2, 4, 6, 8, 10]
>>> type(range)
<class 'type'>
>>> type(range(10))
<class 'range'>
>>> d = {'sachin':'samsung','rahul':'iphone','kiran':'oneplus'}
>>> d
{'sachin': 'samsung', 'rahul': 'iphone', 'kiran': 'oneplus'}
>>> d.keys()
dict_keys(['sachin', 'rahul', 'kiran'])
>>> d.values()
dict_values(['samsung', 'iphone', 'oneplus'])
>>> d['rahul']
'iphone'
>>> d.get('kiran')
'oneplus'
>>> 